#ifndef MODPLAYER_H
#define MODPLAYER_H

#include "audio/audio.h"
#include "audio/mixer.h"
#include "core/dma.h"
#include "core/interrupts.h"
#include "core/timer.h"
#include "core/typedefs.h"
#include "graphics/video.h"
#include "input/in.h"

#define NULL ((void *)0)

// ----- Constants -----

#define MOD_MAX_CHANNELS 4
#define MOD_NO_NOTE 63   // 5 octaves, notes 0-59, 63 fits in same bits
#define MOD_NO_SAMPLE 31 // Valid samples 0-30, use 31 as blank

typedef enum {
  MOD_STATE_STOP,
  MOD_STATE_PLAY,
  MOD_STATE_PAUSE,
} ModState;

// ----- Stacic MOD Data Structures (ROM) ----- //

typedef struct {
  u16 length;
  u8 finetune;
  u8 vol;
  u16 loopStart;
  u16 loopLength;

  const s8 *smpData;
} SampleHeader;

typedef struct {
  const SampleHeader *sample;
  const u8 *order;
  const u8 **pattern;

  u8 orderCount;
  u8 pad[3];
} ModHeader;

// ----- Dynamic MOD Data Structures (RAM) -----

typedef struct {
  const s8 *data;
  u32 pos;
  u32 inc;
  u32 vol;
  u32 length;
  u32 loopLength;
} ModMixerChannel;

typedef struct {
  u32 frequency; // Current frequency of note being played, in Hz
  u8 sample;     // Last sample used on this channel
  u8 vol;        // Current volume

  u8 effect; // Current effect (set to 0 on row tick if no effect/parameter)
  u8 param;  // Current parameter (set to 0 on row tick if no effect/parameter)
} ModChannel;

typedef struct {
  u16 mixFreq;
  u16 rcpMixFreq;
  s16 samplesUntilMODTick;
  u16 samplesPerMODTick;
} ModTiming;

typedef struct {
  const SampleHeader *sample; // Pointer to table of samples in ROM
  const u8 **pattern;         // Pointer to table of pointers to patterns
  const u8 *order;            // Array of pattern numbers to play
  const u8 *rowPtr; // Current position in current pattern, for quick access

  u8 state; // MOD_STATE enum (stopped/playing/paused)
  u8 speed;
  u8 tick;   // When this gets to speed, process a new row and reset it to 0
  u8 curRow; // When this gets to 64, move to the next order and reset to 0

  u8 orderCount;
  u8 curOrder; // When this gets to orderCount, stop the song
  u8 tempo;    // In BPM (Hz = BPM*2/5)
  u8 pad;

  ModChannel channel[MOD_MAX_CHANNELS]; // Current state of each channel
} ModPlayer;

typedef enum {
  MOD_PLAY_NOTE = (1 << 0),
  MOD_SET_VOL = (1 << 1),
  MOD_SET_FREQ = (1 << 2), // create defines for bits, 1 << 1, etc
} ModUpdateFlags;

typedef struct {
  ModChannel *modCh;
  ModMixerChannel *mixCh;

  u8 note;
  u8 sample;
  u8 effect;
  u8 param;

  u8 updateFlags; // ModUpdateFlags
} ModEffectUpdateData;

typedef void (*ModEffect)(ModEffectUpdateData *data);

typedef enum {
  MOD_EFFECT_TIMING_ROW,
  MOD_EFFECT_TIMING_MID,

  MOD_EFFECT_TIMING_COUNT,
} ModEffectTiming;

// ----- Global vars -----

extern ModMixerChannel modMixerChannel[MOD_MAX_CHANNELS];
extern ModTiming modTiming;
extern ModPlayer modPlayer;

// ----- Tables generated by converter (in SndData.c) -----

extern const ModHeader dModTable[];
extern const SampleHeader dSfxTable[];

// ----- Global functions -----

extern void modInit();
extern void modMix(u32 samplesToMix);
extern void modUpdate();
extern void modAdvance();

extern void playMod(u32 modIdx);

#endif
