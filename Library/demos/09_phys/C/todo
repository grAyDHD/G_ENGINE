Minimal Necessary Components

    PositionComponent
        Tracks the entity's position in the world.
        Fields: x and y (fixed-point integers).

    VelocityComponent
        Tracks the entity's movement speed and direction.
        Fields: x and y (fixed-point integers).

    AccelerationComponent
        Tracks changes in velocity due to forces like gravity.
        Fields: x and y (fixed-point integers).

    ColliderComponent (Optional for Movement-Only Demos)
        Defines the shape or size of an entity for collision detection.
        Simplify to basic shapes like circles or rectangles for efficiency.
        Fields: width, height, radius (choose one).

Suggested Systems for Minimal Physics

    MovementSystem
        Updates position based on velocity and delta time:
        position+=velocity×Δt
        position+=velocity×Δt

    AccelerationSystem (Optional if gravity is constant)
        Updates velocity based on acceleration:
        velocity+=acceleration×Δt
        velocity+=acceleration×Δt

    CollisionDetectionSystem (Optional for Non-Collision Demos)
        Checks for overlaps between entities.



Entity creation helper for boundaries
void createBoundaryEntity(ECS *ecs, ComponentStorage *components, int id, 
                         int x, int y, int width, int height) {
    ecs->entity[id].flag |= ENABLE_COLLISIONS;
    components->position[id].x = x;
    components->position[id].y = y;
    components->hitbox[id].width = width;
    components->hitbox[id].height = height;
    // Static objects don't need velocity
    components->velocity[id].dx = 0;
    components->velocity[id].dy = 0;
}

// Initialize boundary entities
void initializeBoundaries(ECS *ecs, ComponentStorage *components) {
    // Floor
    createBoundaryEntity(ecs, components, FLOOR_ENTITY_ID, 
                        0, SH - 1, SW, 1);
    
    // Ceiling
    createBoundaryEntity(ecs, components, CEILING_ENTITY_ID, 
                        0, 0, SW, 1);
    
    // Left wall
    createBoundaryEntity(ecs, components, LEFT_WALL_ENTITY_ID, 
                        0, 0, 1, SH);
    
    // Right wall
    createBoundaryEntity(ecs, components, RIGHT_WALL_ENTITY_ID, 
                        SW - 1, 0, 1, SH);
}

// Updated collision response system
void handleCollisionResponse(ECS *ecs, ComponentStorage *components, int entityId) {
    if (!(ecs->entity[entityId].flag & COLLISION_DETECTED)) {
        return;
    }

    // Handle collision response for dynamic entities (like the player/ball)
    if (ecs->entity[entityId].flag & DYNAMIC_ENTITY) {
        for (int otherId = 0; otherId < MAX_ENTITIES; otherId++) {
            if (otherId == entityId || !(ecs->entity[otherId].flag & ENABLE_COLLISIONS)) {
                continue;
            }

            if (checkForCollision(
                    &components->position[entityId], 
                    &components->velocity[entityId],
                    &components->hitbox[entityId], 
                    &components->position[otherId],
                    &components->velocity[otherId], 
                    &components->hitbox[otherId])) {
                
                // Determine collision side and adjust position/velocity
                int centerA_x = components->position[entityId].x + 
                              components->hitbox[entityId].width / 2;
                int centerB_x = components->position[otherId].x + 
                              components->hitbox[otherId].width / 2;
                int centerA_y = components->position[entityId].y + 
                              components->hitbox[entityId].height / 2;
                int centerB_y = components->position[otherId].y + 
                              components->hitbox[otherId].height / 2;

                // Simplified collision response based on center positions
                if (abs(centerA_x - centerB_x) > abs(centerA_y - centerB_y)) {
                    // Horizontal collision
                    components->velocity[entityId].dx = 0;
                    if (centerA_x < centerB_x) {
                        components->position[entityId].x = components->position[otherId].x - 
                                                        components->hitbox[entityId].width;
                    } else {
                        components->position[entityId].x = components->position[otherId].x + 
                                                        components->hitbox[otherId].width;
                    }
                } else {
                    // Vertical collision
                    components->velocity[entityId].dy = 
                        -(components->velocity[entityId].dy / 2); // Bounce with energy loss
                    
                    if (centerA_y < centerB_y) {
                        components->position[entityId].y = components->position[otherId].y - 
                                                        components->hitbox[entityId].height;
                        if (gravityDirection == 1) {
                            ecs->entity[entityId].flag |= ON_GROUND;
                        }
                    } else {
                        components->position[entityId].y = components->position[otherId].y + 
                                                        components->hitbox[otherId].height;
                        if (gravityDirection == -1) {
                            ecs->entity[entityId].flag |= ON_GROUND;
                        }
                    }
                }
            }
        }
    }
}
