
#include "dmg.h"
#include "in.h"
#include <engine.h>

enum OctaveState { TWO, THREE, FOUR };

u16 NOTES[12][4] = {
    {0x2C, 0x416, 0x60B, 0x706},  // c2-c5    0
    {0x9D, 0x44E, 0x627, 0x714},  // c#2-c#5  1
    {0x107, 0x483, 0x642, 0x721}, // d2-d5    2
    {0x16B, 0x4B5, 0x65B, 0x72D}, // eb2-eb5  3
    {0x1CA, 0x4E5, 0x672, 0x739}, // e2-e5    4
    {0x223, 0x511, 0x689, 0x744}, // f2-f5    5
    {0x277, 0x53C, 0x69E, 0x74F}, // f#2-f#5  6
    {0x2C7, 0x563, 0x6B2, 0x759}, // g2-g5    7
    {0x312, 0x589, 0x6C4, 0x762}, // g#2-g#5  8
    {0x358, 0x5AC, 0x6D6, 0x76B}, // a2-a5    9
    {0x39B, 0x5CE, 0x6E7, 0x773}, // bb2-bb5  10
    {0x3DA, 0x5ED, 0x6F7, 0x77B}, // b2-b5    11
};

u16 note = 0;

int main() {
  ENABLE_SOUND();
  DMG_STEREO_OUTPUT = 0xFF77;
  DSPC = MODE3 | BG2;

  // enum OctaveState octaveState = TWO;
  // for first demo, g# minor scale
  // g#2,a#2,b2,c#3,d#3,e3,f#3,g#3
  // [8][0], [10][0], [11][0], [1][1],[3][1], [4][1], [6][1], [8][1]
  // no length bit0-5 11 1111
  // wave50% 10 bits 6-7, C-F=1111 max volume
  FREQ_1 = CONTINUOUS();
  ENV_1 = 0xF0BF;
  while (1) {
    VBLANK();
    key_poll();
    u16 noteFreq = 0;

    if (key_is_up(B) && key_is_up(A) && ENV_1 > 0)
      ENV_1 = 0;

    if (key_is_up(LT) && key_is_up(RT)) {
      if (key_is_down(B))
        noteFreq = NOTES[8][0]; // G#2
      else if (key_is_down(A))
        noteFreq = NOTES[10][0]; // A#2
    } else if (key_is_down(LT) && key_is_up(RT)) {
      if (key_is_down(B))
        noteFreq = NOTES[11][0]; // B2
      else if (key_is_down(A))
        noteFreq = NOTES[1][1]; // C#3
    } else if (key_is_up(LT) && key_is_down(RT)) {
      if (key_is_down(B))
        noteFreq = NOTES[3][1]; // D#3
      else if (key_is_down(A))
        noteFreq = NOTES[4][1]; // E3
    } else if (key_is_down(LT) && key_is_down(RT)) {
      if (key_is_down(B))
        noteFreq = NOTES[6][1]; // F#3
      else if (key_is_down(A))
        noteFreq = NOTES[8][1]; // G#3
    }

    // If a note was selected, play it
    if (noteFreq != 0) {
      FREQ_1 = noteFreq;
      ENV_1 = 0xF0BF; // used to set length to zero since frequency changed
      PLAY();
    }
  }
  return 0;
}

/*
    // Stop the note if neither A nor B is pressed
    if (key_is_up(KI_A) && key_is_up(KI_B) && ENV_1 > 0) {
      ENV_1 = 0;
    } else {


      if (!INPUT(LT) && !INPUT(RT)) {
        if (INPUT(ST)) {
          noteFreq = NOTES[11][3];
        }
        if (INPUT(B))
          noteFreq = NOTES[8][0]; // G#2
        else if (INPUT(A))
          noteFreq = NOTES[10][0]; // A#2
      } else if (INPUT(LT) && !INPUT(RT)) {
        if (INPUT(B))
          noteFreq = NOTES[11][0]; // B2
        else if (INPUT(A))
          noteFreq = NOTES[1][1]; // C#3
      } else if (!INPUT(LT) && INPUT(RT)) {
        if (INPUT(B))
          noteFreq = NOTES[3][1]; // D#3
        else if (INPUT(A))
          noteFreq = NOTES[4][1]; // E3
      } else if (INPUT(LT) && INPUT(RT)) {
        if (INPUT(B))
          noteFreq = NOTES[6][1]; // F#3
        else if (INPUT(A))
          noteFreq = NOTES[8][1]; // G#3
      }
 *
 *
 *
 *
 *
 *
 *
enum ChordState { ZERO, ONE, TWO, THREE, FOUR };

u16 NOTES[5][4] = {{0x0416, 0x04B5, 0x0563, 0x05CE}, cm7
                   {0x02C7, 0x03DA, 0x0484, 0x0511}, G7
                   {0x04B5, 0x0563, 0x05CE, 0x0642}, ebM7
                   {0x0511, 0x0589, 0x060B, 0X065B}, fm7
                   {0x05ED, 0x0642, 0x0689, 0x06C4}}; bdim7

#define LENGTH_VERY_SHORT 0x3F
#define LENGTH_SHORT 0x2A
#define LENGTH_LONG 0x15
#define LENGTH_VERY_LONG 0x00
u16 currentNoteLength = LENGTH_VERY_SHORT;
*/

/*
  while (1) {
    UPDATE_KEYS();
    if (INPUT(ST) || INPUT(SL)) {
      if (INPUT(ST)) {
        // Handle wave duty changes
        if (PRESS_ONCE(U)) {
          ENV = (ENV & 0xFF3F) | (0x00 << 6);
        } else if (PRESS_ONCE(D)) {
          ENV = (ENV & 0xFF3F) | (0x01 << 6);
        } else if (PRESS_ONCE(L)) {
          ENV = (ENV & 0xFF3F) | (0x02 << 6);
        } else if (PRESS_ONCE(R)) {
          ENV = (ENV & 0xFF3F) | (0x03 << 6);
        }
      } else if (INPUT(SL)) {
        // Handle sound length changes
        if (PRESS_ONCE(U)) {
          currentNoteLength = LENGTH_VERY_SHORT;
          ENV = (ENV & 0xFFC0) | currentNoteLength;
          FREQ = 0x4000; // sets bit 15 to zero, timed mode
        } else if (PRESS_ONCE(D)) {
          currentNoteLength = LENGTH_VERY_LONG;
          ENV = (ENV & 0xFFC0) | currentNoteLength;
          FREQ = 0x4000; // sets bit 15 to zero, timed mode
        } else if (PRESS_ONCE(L)) {
          currentNoteLength = LENGTH_SHORT;
          ENV = (ENV & 0xFFC0) | currentNoteLength;
          FREQ = 0x4000; // sets bit 15 to zero, timed mode
        } else if (PRESS_ONCE(R)) {
          currentNoteLength = LENGTH_LONG;
          ENV = (ENV & 0xFFC0) | currentNoteLength;
          FREQ = 0x4000; // sets bit 15 to zero, timed mode
        }
      }
    } else if (PRESS_ONCE(U)) {
      chordState = (chordState == THREE) ? ZERO : THREE;
    } else if (PRESS_ONCE(D)) {
      chordState = (chordState == ONE) ? ZERO : ONE;
    } else if (PRESS_ONCE(L)) {
      chordState = (chordState == TWO) ? ZERO : TWO;
    } else if (PRESS_ONCE(R)) {
      chordState = (chordState == FOUR) ? ZERO : FOUR;
    }

    // play note on button press
    if (PRESS_ONCE(LS)) {
      note = NOTES[chordState][3];
      FREQ = note | 0xC000;
    } else if (PRESS_ONCE(RS)) {
      note = NOTES[chordState][2];
      FREQ = note | 0xC000;
    } else if (PRESS_ONCE(A)) {
      note = NOTES[chordState][1];
      FREQ = note | 0xC000;
    } else if (PRESS_ONCE(B)) {
      note = NOTES[chordState][0];
      FREQ = note | 0xC000;
    }

    prevKeyCache = keyCache;
    waitVBLANK();
  }
*/
