#include <dmg.h>
#include <gfx.h>
#include <input.h>
#include <typedefs.h>

#define PLAY_NOTE()

#define UPDATE_KEY_CACHE() (prevKeyCache = keyCache);

u16 keyCache;
u16 prevKeyCache;

u16 NOTES[4] = {0xC410, 0x0484, 0x04E5, 0x0563};

enum TetraState { ZERO, ONE, TWO, THREE, FOUR };
enum ToneState { NORMAL, STACCATO, LEGATO };
enum SoundState { IDLE, PLAY_NOTE };

int main() {
  // ENABLE_SOUND();
  DSPC = MODE3 | BG2;
  // DMG_STEREO_OUTPUT = 0xFF77;

  // ENV = 0xC083;

  // enum TetraState currentMode = ZERO;
  //  enum SoundState currentSoundState = IDLE;

  while (1) {
    //    UPDATE_KEYS();
    //    if (INPUT(B)) {
    //      FREQ = NOTES[0];
    //    }
    //  }
  }
  return 0;
}
/*
if (INPUT(LS)) {
// FREQ = 0xCF88;
// PLAY();
// prevKeyCache &= ~(RS | A | B);
} else if (INPUT(RS)) {
// FREQ = 0xCD48;
// PLAY();
// prevKeyCache &= ~(A | B);
} else if (INPUT(A)) {
// FREQ = 0xCC93;
// PLAY();
// prevKeyCache &= ~B;
*
*
*
*
*
*
  switch (currentSoundState) {
  case IDLE:
    // this logic seems tough to scale...

    if (INPUT(LS)) {

    } else if (INPUT(RS)) {

    } else if (INPUT(A)) {

    } else if (INPUT(B)) {
      // new syntax will be PLAY(NOTES[1])
      // where PLAY is a macro that return the bitwise OR of current PLAY()
      // macro and note value
      //        FREQ = NOTES[0];
      //       currentSoundState = PLAY_NOTE;
    }
    break;
  case PLAY_NOTE:
    // hmmmmmm........ no fucking clue.
    if (!(INPUT(B))) {
      currentSoundState = IDLE;
    }
    break;
  }

  switch (currentMode) {
  case ZERO:
    break;

  case ONE:
    break;
  case TWO:
    break;
  case THREE:
    break;
  case FOUR:
    break;
  }
*/
