#include <gfx.h>
#include <input.h>
#include <typedefs.h>

#define PRESS_ONCE(k) ((prevKeyCache & k) && !(keyCache & k))
// #define SET_SOUND_LENGTH(length) (ENV = (ENV & ~0x3F) | ((length) & 0x3F))

u16 keyCache;
u16 prevKeyCache = 0;
// b natural: 0xC6F7  ?? 0xC511, 0xC762
u16 NOTES[5][4] = {
    {0xC416, 0xC4B5, 0xC563,
     0xC5CE}, // C Eb G Bb  d: 0xC484 e: 0xC4E5, g: 0xC563
    {0xC2C7, 0xC3DA, 0xC484,
     0xC511}, // G B D F     g a b d 0xC2C7, 0xC358, 0xC3DD, 0xC484
              //
    {0xC4B5, 0xC563, 0xC5CE,
     0xC642}, // Eb G Bb D   e f a b 0xC4E5, 0xC511, 0xC563, 0xC5ED
    {0xC511, 0xC589, 0xC60B,
     0XC65B}, // F Ab C Eb   f g a c 0xC511, 0xC563, 0xC5AC, 0xC60B
    {0xC5ED, 0xC642, 0xC689,
     0xC6C4}}; // B D F Ab  g# a b d 0xC589, 0xC5AC, 0xC5ED, 0xC642
// 2048 - 131072/hz
enum ChordState { ZERO, ONE, TWO, THREE, FOUR };
enum KeyState { CMAJOR, CMINOR };

enum ToneState { NORMAL, STACCATO, LEGATO };
enum SoundState { IDLE, PLAY_NOTE };

enum ChordState updateChordState(enum ChordState chordState);

void playFrequency(enum ChordState chordState);
#define DEBOUNCE_TIME 1000 // Adjust as needed
static int debounceCounter = 0;

#define DMG_SOUND_SYSTEM *(volatile u16 *)0x04000084
#define ENABLE_SOUND() (DMG_SOUND_SYSTEM |= 0x0080)
#define DMG_STEREO_OUTPUT *(volatile u16 *)0x04000080
#define ENV *(volatile u16 *)0x04000062
#define FREQ *(volatile u16 *)0x04000064

// Define our four length settings
#define LENGTH_VERY_SHORT 0x3F // 63 in decimal, shortest sound
#define LENGTH_SHORT 0x2A      // 42 in decimal, short sound
#define LENGTH_LONG 0x15       // 21 in decimal, long sound
#define LENGTH_VERY_LONG 0x00  // 0 in decimal, longest sound
int main() {
  ENABLE_SOUND(); // master sound enable bit in REG_SOUNDCNT_X
  DMG_STEREO_OUTPUT = 0xFF77;
  ENV = 0xC083; // ENV = REG_SOUND1CNT_H

  DSPC = MODE3 | BG2;
  enum ChordState chordState = ZERO;

  while (1) {
    while (debounceCounter > 0) {
      debounceCounter--;
    }
    UPDATE_KEYS();

    chordState = updateChordState(chordState);
    playFrequency(chordState);
    prevKeyCache = keyCache;
    waitVBLANK();
  }
  return 0;
}

// hold select for directions to change tone, hold start to to change note
// duration, hold both to set sweep/volume presets
enum ChordState updateChordState(enum ChordState chordState) {
  if (INPUT(ST) || INPUT(SL)) {
    if (debounceCounter == 0) {
      if (INPUT(ST)) {
        // Handle wave duty changes
        if (INPUT(U)) {
          ENV = (ENV & 0xFF3F) | (0x00 << 6);
        } else if (INPUT(D)) {
          ENV = (ENV & 0xFF3F) | (0x01 << 6);
        } else if (INPUT(L)) {
          ENV = (ENV & 0xFF3F) | (0x02 << 6);
        } else if (INPUT(R)) {
          ENV = (ENV & 0xFF3F) | (0x03 << 6);
        }
      } else if (INPUT(SL)) {
        // Handle sound length changes
        if (PRESS_ONCE(U)) {
          ENV = (ENV & 0xFFC0) | LENGTH_VERY_SHORT;
        } else if (PRESS_ONCE(D)) {
          ENV = (ENV & 0xFFC0) | LENGTH_VERY_LONG;
        } else if (PRESS_ONCE(L)) {
          ENV = (ENV & 0xFFC0) | LENGTH_SHORT;
        } else if (PRESS_ONCE(R)) {
          ENV = (ENV & 0xFFC0) | LENGTH_LONG;
        }
      }
      debounceCounter = DEBOUNCE_TIME;
    }
  } else if (PRESS_ONCE(U)) {
    if (chordState == THREE) {
      chordState = ZERO;
    } else {
      chordState = THREE;
    }
  } else if (PRESS_ONCE(D)) {
    if (chordState == ONE) {
      chordState = ZERO;
    } else {
      chordState = ONE;
    }
  } else if (PRESS_ONCE(L)) {
    if (chordState == TWO) {
      chordState = ZERO;
    } else {
      chordState = TWO;
    }
  } else if (PRESS_ONCE(R)) {
    if (chordState == FOUR) {
      chordState = ZERO;
    } else {
      chordState = FOUR;
    }
  }

  return chordState;
}

void playFrequency(enum ChordState chordState) {
  switch (chordState) {
  case ZERO:
    if (PRESS_ONCE(LS)) {
      FREQ = NOTES[0][3];
    } else if (PRESS_ONCE(RS)) {
      FREQ = NOTES[0][2];
    } else if (PRESS_ONCE(A)) {
      FREQ = NOTES[0][1];
    } else if (PRESS_ONCE(B)) {
      FREQ = NOTES[0][0];
    }
    break;
  case ONE:
    if (PRESS_ONCE(LS)) {
      FREQ = NOTES[1][3];
    } else if (PRESS_ONCE(RS)) {
      FREQ = NOTES[1][2];
    } else if (PRESS_ONCE(A)) {
      FREQ = NOTES[1][1];
    } else if (PRESS_ONCE(B)) {
      FREQ = NOTES[1][0];
    }
    break;
  case TWO:
    if (PRESS_ONCE(LS)) {
      FREQ = NOTES[2][3];
    } else if (PRESS_ONCE(RS)) {
      FREQ = NOTES[2][2];
    } else if (PRESS_ONCE(A)) {
      FREQ = NOTES[2][1];
    } else if (PRESS_ONCE(B)) {
      FREQ = NOTES[2][0];
    }
    break;
  case THREE:
    if (PRESS_ONCE(LS)) {
      FREQ = NOTES[3][3];
    } else if (PRESS_ONCE(RS)) {
      FREQ = NOTES[3][2];
    } else if (PRESS_ONCE(A)) {
      FREQ = NOTES[3][1];
    } else if (PRESS_ONCE(B)) {
      FREQ = NOTES[3][0];
    }
    break;
  case FOUR:
    if (PRESS_ONCE(LS)) {
      FREQ = NOTES[4][3];
    } else if (PRESS_ONCE(RS)) {
      FREQ = NOTES[4][2];
    } else if (PRESS_ONCE(A)) {
      FREQ = NOTES[4][1];
    } else if (PRESS_ONCE(B)) {
      FREQ = NOTES[4][0];
    }
    break;
  }
}
